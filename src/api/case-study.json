[
  {
    "id": 1,
    "title": "QMIT",
    "subtitle": "Empowering athletes with technology",
    "description": "QMIT's vision is to positively change sport culture through technology. Information Technology has the power to make many aspects of sport more convenient, transparent and systematic.\n\nAt the time I joined QMIT there was only one backend developer and most of the backend work was done. My first mission was to develop the PLCO application. About 5 months in, we started the development of PLCO for Coach. Since this project, I took the frontend lead and was in charge of picking the stack, setting up the project, creating the design system and recruiting new members. Today our team is composed of 4 frontend developers and 2 backend developers. Aside from frontend tasks, I built two microservices; one for payments (i.e. subscription based) and one for notifications (i.e. email, sms, push notification).\n\nThe first 2 case studies will walk you through our 2 products in detail. The PLCO app helps you become a better athlete without sacrificing your health. The PLCO for Coach web app provides coaches with the tools to make better decisions to lead their team to greatness. The third case study is a close-up on a particular feature of PLCO for Coach, the Chart System. I picked this feature specifically to highlight my mindset when it comes to problem solving.",
    "image": {
      "src": "/assets/images/qmit-header.jpg",
      "alt": "image of sports"
    },
    "link": {
      "label": "Visit Website",
      "url": "https://plco.pro"
    },
    "features": [
      {
        "title": "PLCO",
        "image": {
          "src": "/assets/images/plco-header.jpg",
          "alt": "image of plco application"
        },
        "challenge": [
          {
            "type": "paragraph",
            "value": "All athletes strive to achieve the best performance, but excessive training with disregard for your physical condition often leads to injury. The goal of plco is to offer you the means necessary to achieve this objective.\n\nPLCO targets both individual athletes and athletes that are part of a team. This translates to features designed either for one type of user or for both."
          }
        ],
        "solution": [
          {
            "type": "paragraph",
            "value": "PLCO is a hybrid application made using React Native. It comes in two flavors with a light and a dark theme. The design is a mix of Eva Design System (UI Kitten) with the addition of many custom components made by myself for the most part (e.g. slider input, injury dummy, sliding list)."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-home.jpg",
              "alt": "image of plco home screen"
            }
          },
          {
            "type": "paragraph",
            "value": "The home screen acts as a dashboard. From there you can access the most important actions such as recording your data and viewing your upcoming events and to-dos."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-record-condition.jpg",
              "alt": "image of plco condition record screens"
            }
          },
          {
            "type": "paragraph",
            "value": "The recording is the first and most vital step in using PLCO. The more often you input your raw data, the more reliable the computed data we provide will be.\n\nThe condition is expected to be registered daily. To help with that, I built a local notification scheduler and a remote notification service. Players can set up daily reminders and coaches can send reminders to all players who fail to report."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-record-workload.jpg",
              "alt": "image of plco workload record screens"
            }
          },
          {
            "type": "paragraph",
            "value": "Whenever you complete a workload (e.g. training, match) you are encouraged to register it. Workload data will be used to detect undertraining, overtraining and to calculate ACWR (i.e. risk of injury).\n\nUpon completing a condition or workload input, the injury dummy shows up. Body-part by body-part, you can update your injury report to keep track of current and past injuries."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-data-main.jpg",
              "alt": "image of plco main data screens"
            }
          },
          {
            "type": "paragraph",
            "value": "From the data tab you can view, edit and delete all previous data. Data will be presented to you in 2 formats, in it's raw format and in it's computed format. Computed format includes “Readiness” (i.e. overall condition), degree labels (e.g. good, normal, danger), highlights (i.e. personalized advice) and more."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-data-detail.jpg",
              "alt": "image of plco detail data screens"
            }
          },
          {
            "type": "paragraph",
            "value": "The data tab contains another depth with charts, the highlight collection, and the list of all recorded data. While the top depth organizes data day by day, this level allows you to view all past data together to better grasp trends and detect issues."
          }
        ],
        "result": [
          {
            "type": "paragraph",
            "value": "The outcome is an app that allows athletes to receive valuable feedback and guidance. Our users are able to yield the best results from training while preserving their health. All it takes is to record simple data.\n\nFor coaches, PLCO is the cornerstone to their Athlete Monitoring System. We remove the burden of gathering all this data from players by hand. We give them more time to focus on the actual coaching."
          }
        ]
      },
      {
        "title": "PLCO for Coach",
        "image": {
          "src": "/assets/images/plco-pro-header.jpg",
          "alt": "image of plco for coach web application"
        },
        "challenge": [
          {
            "type": "paragraph",
            "value": "Coaches want their team to succeed and to win. To achieve it, it is critical to offer the best training while maintaining the morale and health of your athletes.\n\nFirst, you'll need the tool to gather data from your players. By using PLCO they will do it for you. Then you'll want to view your team data in a clear and informative way. You want to quickly grasp the physical and mental condition of both your team and your athletes individually. Finally, you'll want to act on it by adjusting your training content and intensity and by communicating with your team. We aim to provide the tools for you to do it effortlessly."
          }
        ],
        "solution": [
          {
            "type": "paragraph",
            "value": "PLCO for Coach is a responsive web application based on a React stack. I built a custom component library and design system using Theme UI as the base design framework. Like PLCO, it offers both Korean and English language options. It is a secure access portal with granular authorization based on the type of user (e.g. team owner, head coach, physical coach)."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-pro-dashboard.jpg",
              "alt": "image of plco for coach dashboard page"
            }
          },
          {
            "type": "paragraph",
            "value": "The dashboard is your entry-point to the application. The top section is here to help you ensure your players record their data. The bottom section gives you a quick glance at the 3 main components of the athlete monitoring system: your team's condition, workload and injury state."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-pro-monitoring.jpg",
              "alt": "image of plco for coach monitoring page"
            }
          },
          {
            "type": "paragraph",
            "value": "The monitoring page is here to give you more detailed and exhaustive information. All raw data and computed data is accessible here. You'll find raw data such as stress level or sleep quality and computed data such as monotony (i.e. workload fluctuations) or ACWR (i.e. risk of injury).\n\nWhile the dashboard aggregates data as your team's average, here data is displayed player by player. Data can be filtered by group and received by daily, weekly or monthly period. To suit every need, data is displayed in both chart and table formats."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-pro-insight.jpg",
              "alt": "image of plco for coach insight page"
            }
          },
          {
            "type": "paragraph",
            "value": "Because browsing data can be time consuming, we added the insight page to help you quickly identify anomalies. Each time period (i.e. daily, weekly and monthly) has its own relevant widgets. They expose players with issues that need to be addressed."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-pro-event.jpg",
              "alt": "image of plco for coach event page"
            }
          },
          {
            "type": "paragraph",
            "value": "The event page works similarly to a regular calendar app except for a few differences. The first difference is that most of its features are relevant to the sport domain. Events you can create include training or matches. The second difference is that it will be directly integrated with the PLCO and PLCO for Coach ecosystem. Events will show up on the athlete's app and each event will be linked to its own recorded data."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/plco-pro-player.jpg",
              "alt": "image of plco for coach player page"
            }
          },
          {
            "type": "paragraph",
            "value": "Each athlete has its own dedicated page; it gives you a clear and complete picture so you can assess its current and past state. After identifying a problem, the next step is to take action. Talk to your player, adapt its training program, or dismiss him from the incoming match to allow for recovery. Finally, examine the weekly and monthly progression and find out if your coaching has yielded positive results."
          }
        ],
        "result": [
          {
            "type": "paragraph",
            "value": "The result is an all-around athlete monitoring system. PLCO for Coach helps you make better coaching decisions by using a holistic approach to workload management and injury prevention.\n\nOur users have reported a sharp decline in injuries, better morale, more gratifying training and a better performing team."
          }
        ]
      },
      {
        "title": "Chart System",
        "image": {
          "src": "/assets/images/chart-system-header.jpg",
          "alt": "image of charts"
        },
        "challenge": [
          {
            "type": "paragraph",
            "value": "As we added more pages and features to PLCO for Coach, the number of charts kept increasing rapidly. For every new chart, we had to repeat the same steps. This led to a lot of redundancy and code duplication. It became apparent to me that we needed a higher level of abstraction. We needed a system."
          }
        ],
        "solution": [
          {
            "type": "image",
            "value": {
              "src": "/assets/images/chart-system-chain.jpg",
              "alt": "schema of the chart system"
            }
          },
          {
            "type": "paragraph",
            "value": "At that time, the old implementation was a 2-step process. I only made a wrapper of the Victory charting library as the Chart component. Each page or parent component was still responsible for implementing the rest of the flow.\n\nTo improve on that, the idea was to encapsulate each of these steps into a reusable chunk. What's more, by designing some of these chunks as a system too, they can be reused elsewhere inside the application. This gives us the Chart System, a 6-step process which given a config as input returns a chart as output."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/chart-system-first-steps.jpg",
              "alt": "schema of the 3 first steps of the chart system"
            }
          },
          {
            "type": "paragraph",
            "value": "The Query System integrates with Apollo, our GraphQL data fetching client. Given a query key and variables, the Query System will generate and call the proper query, then return the data. The variables can then be modified anywhere down the chain, triggering a new fetch (e.g. by changing the current date through the date picker). Once new data is received the whole chain will re-run rendering a new chart.\n\nSince our queries are tightly coupled with our backend, the received data needs to be transformed into data compatible with the rest of the Chart System. That is the role being filled by the Parser System.\n\nThe Store System is here to centralize the system state so it can be easily accessed and modified from anywhere inside or outside of it. For instance, the Query System will write into the Store System “data” field. After that, the Parser System will read it, parse it, then write the output into the “parsedData” field and so on."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/chart-system-last-steps.jpg",
              "alt": "schema of the 3 last steps of the chart system"
            }
          },
          {
            "type": "paragraph",
            "value": "The Chart Props is the most elaborate step in the process. It's role is to generate all the properties used by the Chart and by extension the Victory library. It is a huge collection of hundreds of reusable functions dedicated to axes, domain, events and more.\nAn example for the x axis is the key “DAY_OF_WEEK” which returns a function that turns raw dates (e.g. 2021-05-16T15:00:00.000Z) into localized days of the week (e.g. Mon, Tue, etc.).\nAnother example is the key “Y_MAX_PLUS_400_DEFAULT_1600_ROUNDED_UP” that reads all data, then generates all y axis tick values. In this case either up until 1600 or the biggest found y value rounded up to 400 (i.e. for workload values between 0 and 2316, it will return 0, 400, 800, 1200, 1600, 2000 and 2400).\nA final example would be keys that render complete components such as “LABEL_AVATAR” rendering a user avatar or “LABEL_TOOLTIP_MULTI_TEAM_DATA” rendering an advanced tooltip.\n\nThe Chart receives 2 types of properties. The one generated in the previous step and styling properties from its parent component (e.g. chart width, height, padding). It then combines these 2 and converts them into the corresponding Victory components. For instance, each dataset item of type “BAR” will render a VictoryBar component (i.e. a bar chart).\n\nThe Victory Chart is the final step. The inner functioning of the library will draw vector graphics (i.e. SVG) representing different kinds of charts to accurately visualize our data."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/chart-system-config-to-chart.jpg",
              "alt": "schema of 2 configs turning into 2 charts"
            }
          },
          {
            "type": "paragraph",
            "value": "The config is highly customizable and allows just about any combination. You can request any data, mix as many different chart types as you want (e.g. bar, line, stack), display several axes, personalize appearance and even control domain navigation."
          }
        ],
        "result": [
          {
            "type": "paragraph",
            "value": "As of today, with over 90 charts in the form of 8000 lines of config, the Chart System proved to be extremely valuable. The systematic approach helped us save a tremendous amount of time, effort and code. Adding or modifying a chart is now a smooth and proven method allowing for quick iterations.\n\nThe next evolution for the Chart System is to allow users to create their own charts through a user-friendly config editor.\n\nAs for our team the next goal is to expand the use of systems in our codebase. This can be done by relying more on the newly made systems and by applying the same philosophy to other parts of our products."
          }
        ]
      }
    ]
  },
  {
    "id": 2,
    "title": "Withgoods",
    "subtitle": "Building a print-on-demand website",
    "description": "Withgoods is a place where anyone can upload and sell their original artworks as custom high quality goods.\n\nI joined Withgoods at the very beginning of the project as the lead developer of a team of 4. We used state-of-the-art and custom technologies: frontend, backend, AI, custom image generation pipeline. In just 3 months we built and released the first version of Withgoods.\n\nMy role included designing and implementing the API. Building a responsive and modern interface. Creating a custom image editor and generator. Handling the devops tasks (hosting, deploying, testing, monitoring). Organizing the agile development workflow in collaboration with the other project members.\n\nBelow are 3 case studies for the features that I had the most fun making and which I believe brings the most value. The first one is the image generator that creates realistic looking product images from the artist's artwork and our items. The second one is the integration of Google Vision AI into our search system to allow efficient image filtering. The last case study is an on-the-fly image optimizer which drastically improves our page loading speed and user's data usage.",
    "image": {
      "src": "/assets/images/withgoods-header.jpg",
      "alt": "image of withgoods items"
    },
    "link": {
      "label": "Visit Website",
      "url": "https://withgoods.net"
    },
    "features": [
      {
        "title": "Image generator",
        "image": {
          "src": "/assets/images/image-generation-header.jpg",
          "alt": "image of image editor"
        },
        "challenge": [
          {
            "type": "paragraph",
            "value": "Generating life-like product images is our core feature both for the artists and the customers. If something feels wrong (i.e. too pixelated, too flat, bad lightning) the illusion is broken. To advocate high quality, induce sales and promote our brand it is critical that we generate the best images we can."
          }
        ],
        "solution": [
          {
            "type": "paragraph",
            "value": "To create a product image we need 4 different things. The artwork (e.g. some characters on a beach), the product image (e.g. a mug cup), a clipping mask (e.g. a mug shaped rectangle) and an overlay (e.g. some light beams)."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/image-generation-mix.jpg",
              "alt": "image of image generation result"
            }
          },
          {
            "type": "paragraph",
            "value": "Image Generation can be resumed in 6 steps:\n1) Editing. Using our custom photoshop-like editor, you can edit your artwork inside a live preview of the product. You can move, scale and rotate both images and texts until it suits you. When done, the result is uploaded as an image and the generation starts.\n2) Cropping. Here we crop the part of the artwork we need and place it according to the product template. For example the left part of the template will be the front of the mug, the right part being the back.\n3) Mask Clipping. By applying a clipping mask we obtain an exact shape with all its irregularities. For a clock the mask will be a circle.\n4) Curving. Here we displace the pixels according to a predefined curve (Bezier curve). This will create the illusion of a round object and give a 3D effect.\n5) Merging. We merge the transformed artwork image on top of the product item image to create our custom product image.\n6) Overlay. Finally we merge the overlay image on top. Overlay includes reflection and light rays to create the illusion of a reflective texture thus reinforcing the 3D and realistic effect."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/image-generation-photoshop.jpg",
              "alt": "image of image generation on mobile device"
            }
          },
          {
            "type": "paragraph",
            "value": "Considering the artist pick 20 items and each item needs 3 images (i.e. left, front and right view), we need to generate 60 images at once. Image generation is a heavy process, running it all at once would overload and slow down our main server. Here the image generation process has been moved from our main server to a serverless function (AWS Lambda). When an image generation is requested, a new function is launched, create the image, save it and is terminated. When 60 are requested, 60 functions will run in parallel. This feature is totally independent from our main server and is infinitely scalable."
          }
        ],
        "result": [
          {
            "type": "paragraph",
            "value": "The end result is a high quality image with the artwork matching the object shape and orientation. The reflection overlay giving it a neat finish reinforcing the realistic and 3D effect. The generation process can easily be configured from the admin page. Changing the mask, increasing the curvature or updating the overlay can be done in a few clicks. Changes can be applied to new items as well as old items. Images can be regenerated at any time."
          }
        ]
      },
      {
        "title": "AI-powered search engine",
        "image": {
          "src": "/assets/images/ai-search-header.jpg",
          "alt": "image of the search page"
        },
        "challenge": [
          {
            "type": "paragraph",
            "value": "On Withgoods, the products are created by the users. For each artwork uploaded, dozens of new products are created. As the number of items quickly increased it became necessary to provide an effective way to search. Since we are dealing with images, a simple text search wouldn't be enough, we needed a better way to classify and sort artworks. We wanted to keep the upload process as quick and seamless as possible for both users and admins. No additional actions such as labelling or reviewing should be required."
          }
        ],
        "solution": [
          {
            "type": "paragraph",
            "value": "The idea is to take advantage of AI with Google Vision API. The Vision API takes an image as input and produce metadata such as labels, dominants colors, text and more."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/ai-search-vision-api.jpg",
              "alt": "schema of vision API integration"
            }
          },
          {
            "type": "paragraph",
            "value": "From the generated metadata we extract the labels, each label comes with a confidence score. We only get the labels with a high score, which usually gives us between 3 to 5 labels. The resulting labels being in english only, we then use Google Cloud Translation API to translate them to korean."
          },
          {
            "type": "paragraph",
            "value": "For colors, we get a set of dominant colors which comes with a score (importance of this color in the image) and a percentage (how much of this image is taken by this color). We use these two metrics to extract only the most relevant colors, usually 1 to 3. These colors will then be matched against a custom palette, the same palette that will be used as filter when searching."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/ai-search-mobile.jpg",
              "alt": "image of search results"
            }
          },
          {
            "type": "paragraph",
            "value": "This process is run in the background so the user experience is not affected in any way. When an artwork is uploaded a serverless function (AWS Lambda) will trigger the necessary calls to the Google Cloud services. The function will then parse and persist its metadata in our database. It's a completely automatic, silent and scalable solution."
          }
        ],
        "result": [
          {
            "type": "paragraph",
            "value": "The search page is the most visited page (after our landing page). It holds the longest session times and allows our users to effectively find what they are looking for. If you are looking for an illustration of a black cat you are able to find just that."
          }
        ]
      },
      {
        "title": "On-the-fly image optimizer",
        "image": {
          "src": "/assets/images/thumbnail-header.jpg",
          "alt": "genrerated item images"
        },
        "challenge": [
          {
            "type": "paragraph",
            "value": "In the earliest versions of Withgoods, users could upload images up to 5mb. These images were served in their original format. Pages containing a lot of these became really heavy and slow. The same image is needed alternatively as a small thumbnail, a medium sized product image or a high quality gallery image. We also needed a way to protect our artist by not providing the original image and applying watermarks."
          }
        ],
        "solution": [
          {
            "type": "paragraph",
            "value": "Our original images are stored in AWS S3 (file storage). The first step was to setup AWS CloudFront (CDN) to deliver images faster through AWS globally-distributed network. CloudFront comes with a functionality allowing us to run serveless code (AWS Lambda@Edge) at certains steps of the content distribution. The idea here is to request the image with the needed optimizations, apply these changes, then save and cache the result for future use."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/thumbnail-schema.jpg",
              "alt": "schema of thumbnail architecture"
            }
          },
          {
            "type": "paragraph",
            "value": "During the first step and before hitting the cache (function 1 in schema), we validate and parse the request looking for 3 possible parameters. The first one is the desired dimensions and is the only mandatory one. Its format is WIDTHxHEIGHT (e.g. 500x500). The second one is quality. Here we accept the values “full” (original quality), “fine” (lowest quality settings before artifacts start to appear), and “low”. The third and last one is the watermark. Here we can pick from a set of watermarks to apply (e.g. logo or grid). From the combination of these we generate a unique URI to store and retrieve the generated image."
          },
          {
            "type": "paragraph",
            "value": "After completing the first step, we ask CloudFront if the URI exists. If it does, the optimized image is immediately returned. If it doesn't we ask for the original image directly from S3."
          },
          {
            "type": "paragraph",
            "value": "When the file is returned from S3 but before it is returned to the client (function 2 in schema) we intercept it and will apply all the requested optimizations. Using an image processing library we resize to the desired dimensions, format to the new quality settings and if needed apply a watermark. We both save the optimized image in S3 and send it back. CloudFront will cache it and return it to the client. The next time this URI is requested it will be instantly returned from CloudFront cache."
          },
          {
            "type": "image",
            "value": {
              "src": "/assets/images/thumbnail-examples.jpg",
              "alt": "examples of thumbnail generation"
            }
          }
        ],
        "result": [
          {
            "type": "paragraph",
            "value": "We can now optimize and watermark our images on the fly. Implementing this solution drastically improved page loading speed and reduced data usage. We were able to increase the upload limit from 5 to 20mb for better raw image quality. Reducing the image size, also meant reducing the transfer costs thus reducing the bill. Now whenever our UI changes and requires new settings, it only takes one run to generate the new optimized images and will be done in an automatic and effortless way."
          }
        ]
      }
    ]
  }
]